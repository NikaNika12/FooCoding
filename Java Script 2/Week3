// 2.1 
function foo(func) {
  func(Math.max(1, 3, 2));
}

function bar() {
  console.log('Hello, I am bar!');
}

foo(bar);

// 2.2
function threeFive(startIndex, stopIndex, threeCallback, fiveCallback) {
  const numbers = [];

  for (const i = startIndex; i <= stopIndex; i++) {
    numbers.push(i);
  }

  numbers.forEach(number => {
    if (number % 5 === 0) {
      fiveCallback(number);
    } else if (number % 3 === 0) {
      threeCallback(number);
    }
  });
}

function sayThree(number) {
  console.log(`The value is ${number} is divisible by 3.`);
}

function sayFive(number) {
  console.log(`The value is ${number} is divisible by 5.`);
}

threeFive(10, 15, sayThree, sayFive);

// 2.3 

function repeatStringNumTimes(str, num) {
  return str;
}
repeatStringNumTimes("abc", 3);

function repeatStringNumTimes(string, times) {
  let repeatedStringT = "";
  while (times > 0) { 
    repeatedStringT += string; 
    times--;
  return repeatedStringT; 
}

repeatStringNumTimes("abc", 3);

function repeatStringWhile(str, num) {
  let repeatedStringW = '';
  let i = 0;
  while (i < num) {
    repeatedStringW += str;
    i++;
  }
  console.log(out);
}

repeatStringWhile('abc', 3);

function repeatStringDoWhile(str, num) {
  let repeatedStringDW = '';
  let i = 0;
  do {
    repeatedStringDW += str;
    i++;
  } while (i < num);
  console.log(out);
}

repeatStringDoWhile('abc', 3);

function repeatStringFor(str, num) {
  let repeatStringF = '';
  for (let i = 0; i < num; i++) {
    repeatStringF += str;
  }
  console.log(out);
}

repeatStringFor('abc', 3);

// 2.4  

function Dog() {
  this.name = 'Haski';
  this.color = 'gray';
  this.eyes = 'blue';
  this.foodtype = 'meat';
}

let betsi = new Dog();
console.log(betsi);

// 2.5

function multiplyAll(arr) {
  let product = 1;
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr[i].length; j++) {
      product *= arr[i][j];
    }
  }
  return product;
}

console.log(multiplyAll([[1, 2], [3, 4], [5, 6, 7]]));

//2.6

const arr2d = [[1, 2], [3, 4], [5, 6]];
const arr3d = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];


// To flat single level array
arr2d.flat();
// is equivalent to
arr2d.reduce((acc, val) => acc.concat(val), []);

arr3d.flat(2);

//2.7

//x is the value, f1 operates directly on the value passed to it as an argument and returns a result of that value plus 1;

const x = 9;
function f1(val) {
  val = val + 1;
  return val;
}
f1(x);
console.log(x);

//y is the object, f2 operates on the object itself;

const y = { x: 9 };
function f2(val) {
  val.x = val.x + 1;
  return val;
}
f2(y);
console.log(y);

//3

function createBase(base) {
  function calcBase(calc) {
    return base + calc;
  }
  return calcBase;
}

const addSix = createBase(6);
console.log(addSix(10)); // returns 16
console.log(addSix(21)); // returns 27

//3.1

const generalArray = ['a', 'b', 'c', 'd', 'a', 'e', 'f', 'c'];
const uniqueArray = [...new Set(generalArray)];

console.log(uniqueArray);

